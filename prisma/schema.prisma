// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scopes            String[]
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  cid           String
  firstName     String?
  lastName      String?
  fullName      String?
  email         String?   @unique
  emailVerified DateTime?
  artcc         String
  rating        Int
  division      String

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tracon {
  faaIdentifier  String         @id
  name           String?
  departureGates String[]
  areas          TraconArea[]
  sectors        TraconSector[]
}

model TraconArea {
  id            String    @id @default(cuid())
  faaIdentifier String
  name          String
  sopLink       String
  majorFields   Airport[] @relation("Airport_majorField")
  minorFields   Airport[] @relation("Airport_minorFields")

  parentTracon        Tracon? @relation(fields: [traconFaaIdentifier], references: [faaIdentifier], onDelete: Cascade, onUpdate: Cascade)
  traconFaaIdentifier String?

  @@unique([traconFaaIdentifier, faaIdentifier])
}

model TraconSector {
  id            String                     @id @default(cuid())
  name          String
  sectorLetter  String
  frequency     String
  assignedGates DepartureGatesAssignment[]

  parentTracon   Tracon? @relation(fields: [parentTraconId], references: [faaIdentifier], onDelete: Cascade, onUpdate: Cascade)
  parentTraconId String?

  @@unique([parentTraconId, name])
}

model Airport {
  icao                     String                     @id
  faaIdentifier            String                     @unique
  sopLink                  String
  localControlPositions    String[]
  customizableOptions      CustomizableOption[]       @relation("Airport_customizableOptions")
  activeFlow               AirportFlow?               @relation("Airport_activeFlow")
  flows                    AirportFlow[]
  departureGateAssignments DepartureGatesAssignment[]
  localRunwayAssignments   TowerRunwayAssignment[]

  runways Runway[] @relation("Airport_runways")

  parentMajorTraconArea TraconArea? @relation("Airport_majorField", fields: [parentTraconAreaId], references: [id], map: "airport_major_fields_fkey", onDelete: Cascade, onUpdate: Cascade)
  parentMinorTraconArea TraconArea? @relation("Airport_minorFields", fields: [parentTraconAreaId], references: [id], map: "airport_minor_fields_fkey", onDelete: Cascade, onUpdate: Cascade)

  parentTraconAreaId String @unique
}

model AirportFlow {
  id   String @id @default(cuid())
  name String

  flowActiveAirport   Airport? @relation("Airport_activeFlow", fields: [flowActiveAirportId], references: [icao])
  flowActiveAirportId String?  @unique

  airport   Airport? @relation(fields: [airportId], references: [icao], onDelete: Cascade, onUpdate: Cascade)
  airportId String?

  departureRunways Runway[] @relation("AirportFlow_departureRunways")
  arrivalRunways   Runway[] @relation("AirportFlow_arrivalRunways")

  traconVisibleOptions CustomizableOption[] @relation("AirportFlow_traconVisibleOptions")

  @@unique([airportId, name])
}

model Runway {
  id             String   @id @default(cuid())
  runwayNumber   String
  approachTypes  String[]
  departureTypes String[]

  flowDeparture AirportFlow? @relation("AirportFlow_departureRunways", fields: [flowId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "runway_departure_flow_fkey")
  flowArrival   AirportFlow? @relation("AirportFlow_arrivalRunways", fields: [flowId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "runway_arrival_flow_fkey")
  flowId        String?

  airport   Airport? @relation("Airport_runways", fields: [airportId], references: [icao], onDelete: Cascade, onUpdate: Cascade)
  airportId String?
}

model CustomizableOption {
  id      String   @id @default(cuid())
  name    String
  value   String?
  choices String[]

  flowOption AirportFlow? @relation("AirportFlow_traconVisibleOptions", fields: [flowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  flowId     String?

  airportOption Airport? @relation("Airport_customizableOptions", fields: [airportId], references: [icao], onDelete: Cascade, onUpdate: Cascade)
  airportId     String?
}

model DepartureGatesAssignment {
  id String @id @default(cuid())

  airport   Airport @relation(fields: [airportId], references: [icao])
  airportId String

  sector   TraconSector @relation(fields: [sectorId], references: [id])
  sectorId String

  gates String[]
}

model TowerRunwayAssignment {
  id                String   @id @default(cuid())
  runwayIdentifiers String[]
  localIdentifier   String

  airport   Airport @relation(fields: [airportId], references: [icao])
  airportId String
}

model Pirep {
  id           String    @id @default(cuid())
  urgency      PirepType
  location     String
  time         DateTime
  flightLevel  String
  aircraftType String
  remarks      String
}

model Broadcast {
  id      String @id @default(cuid())
  message String
}

enum PirepType {
  ROUTINE
  URGENT
}
